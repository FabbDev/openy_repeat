<?php
// $Id$

/**
 * @file
 * A geolocation field using the Field API.
 */

/**
 * Implements hook_field_info().
 */
function geolocation_field_info() {
  return array(
    'geolocation_latlng' => array(
      'label' => t('Geolocation'),
      'description' => t('Geolocation input.'),
      'default_widget' => 'geolocation_latlng',
      'default_formatter' => 'geolocation_text',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function geolocation_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['lat'])) {
      if ( !is_numeric($item['lat']) ) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'geolocation_invalid',
          'message' => t('Invalid Latitude.'),
        );
      }
      if ( !is_numeric($item['lng']) ) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'geolocation_invalid',
          'message' => t('Invalid Longitude.'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_presave().
 */
function geolocation_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items AS $delta => $item) {
    // Precalculate some goodness.
    $item['lat_sin'] = sin(deg2rad($item['lat']));
    $item['lat_cos'] = cos(deg2rad($item['lat']));
    $item['lng_rad'] = deg2rad($item['lng']);
    $items[$delta] = $item;
  }
}

/**
 * Implements hook_field_is_empty().
 */
function geolocation_field_is_empty($item, $field) {
  if ( empty($item['lat']) ) {
    return TRUE;
  }
  if ( empty($item['lng']) ) {
    return TRUE;
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function geolocation_field_formatter_info() {
  return array(
    'geolocation_text' => array(
      'label' => t('Simple text-based formatter'),
      'field types' => array('geolocation_latlng'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function geolocation_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {

    case 'geolocation_text':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = '<p>' . t('Geolocation is @lat, @lng', array('@lat' => $item['lat'], '@lng' => $item['lng'])) . '</p>';
      }
      break;

  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function geolocation_field_widget_info() {
  return array(
    'geolocation_text' => array(
      'label' => t('Latitude/Longitude'),
      'field types' => array('geolocation_latlng'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function geolocation_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $lat_value = isset($items[$delta]['lat']) ? $items[$delta]['lat'] : '';
  $lng_value = isset($items[$delta]['lng']) ? $items[$delta]['lng'] : '';
  $element += array(
    '#delta' => $delta,
  );
  $element['lat'] = array();
  $element['lng'] = array();

  switch ($instance['widget']['type']) {

    case 'geolocation_text':
      $element['lat'] += array(
        '#title' => t('Latitude'),
        '#type' => 'textfield',
        '#default_value' => $lat_value,
        '#size' => 30,
        '#maxlength' => 30,
      );
      $element['lng'] += array(
        '#title' => t('Longitude'),
        '#type' => 'textfield',
        '#default_value' => $lng_value,
        '#size' => 30,
        '#maxlength' => 30,
      );
      break;

  }
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function geolocation_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'geolocation_invalid':
      form_error($element, $error['message']);
      break;
  }
}
