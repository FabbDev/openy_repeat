<?php //$Id

/**
 * @file
 *
 * a geolocation field.
 *
 * @todo: views integration - proximity filter, expose latitude and longitude independently to views.
 * @todo: add mysql spatial extension support and distance mapping.
 *
 * High Performance Proximity Detection Methodology?

 * 1) limit result set using mysql spatial extensions for rough bounding boxes.
 *     and limit the result set that we use to compute greater circle...
 *    ex) WHERE MBRwithin()
 * 2) Store long in radians
 * 3) precompute sin/cos for lats.
 *
 * table {
      longitude varchar
      latitude varchar
      longrads float
      latsin  float
      latcos  float
      latlong_pt POINT(longitude, latitude)
   }
  
   given $max_distance FROM (ptlat, ptlong)
   $radius = 0.5 * $max_distance;
   $poly = ($ptlong + $radius) .' '. ($ptlat + $radius).','. ($ptlong + $radius) .' '. ($ptlat - $radius).','. 
             ($ptlong - $radius) .' '. ($ptlat - $radius).','. ($ptlong - $radius).' '. ($ptlat + $radius).','.
             ($ptlong + $radius).' '. ($ptlat + $radius)

   $ptlatsin = sin(deg2rad($ptlat));
   $ptlatcos = cos(deg2rad($ptlat));
   $ptlongrads = deg2rad($ptlong);
   SELECT nid, delta,  acos( ($ptlatsin * latsin) +  (ptlatcos*latcos * cos(longrads - ptlongrads) )) as distance
   from geolocation WHERE MRBContains(POLYGON($poly), latlong_pt) AND distance < $max_distance.
 *
 */

/**
 * @defgoup geolocation_core_hooks
 * @{
 * 
 * Core Drupal hooks for geolocation.
 */

function geolocation_help($section) {
}

function geolocation_perms() {
}

/**
 * @} End "defgoup geolocation_core_hooks"
 */


/**
 * @defgoup geolocation_field_hooks
 * @{
 * 
 * CCK field hooks for geolocation.
 */

function geolocation_field_info() {
  return array(
      'geolocation' => array('label' => 'Geolocation'),
  );    
}

function geolocation_field_settings($op, $field) {
  switch($op) {
    case 'form':
      break;
  
    case 'validate':
      break;
    
    case 'save':
      break;

    case 'database columns':
      return array(
        'longitude' => array(
          'type' => 'float',
          'not null' => TRUE,
          'default' => 0,
        ),
        'latitude' => array(
          'type' => 'float',
          'not null' => TRUE,
          'default' => 0,
        ),
        'longrads' => array(
          'type' => 'float',
          'not null' => TRUE,
          'default' => 0,
        ),
        'latsin' => array(
          'type' => 'float',
          'not null' => TRUE,
          'default' => 0,
        ),
        'latcos' => array(
          'type' => 'float',
          'not null' => TRUE,
          'default' => 0,
        ),
        'source' => array(
          'type' => 'text',
          'default' => '',
        ),
      );
  } 
} 

function geolocation_field($op, $node, $field, &$items, $teaser, $page) {
  switch($op) {
    case 'validate':
      foreach($items as $delta => $item) {
        if ( (-90 >= $item['latitude']) && ($item['latitude'] <= 90) ) {
          form_set_error($field['field_name'], t('Latitude is out of Range.'));
        }
        if ( (-180 >= $item['longitude']) && ($item['latitude'] <= 180) ) {
          form_set_error($field['field_name'], t('Latitude is out of Range'));
        }
      }
      break;

    case 'insert':
    case 'update':
      foreach ($items as $delta => $item) {
        // precalculate some goodness.
        $item['latsin'] = sin(deg2rad($item['latitude']));
        $item['latcos'] = cos(deg2rad($item['latitude']));
        $item['longrads'] = deg2rad($item['longitude']);
        $items[$delta] = $item;
      }   
      $items = array_values($items); // compact deltas
  }
}

/**
 * @}
 */


/**
 * @defgoup geolocation_widget_hooks
 * @{
 * 
 * Plain widget for geolocation.
 */

function geolocation_widget_info() {
  return array(
    'geolocation_textfields' => array(
       'label' => 'Long./Lat. text fields',
       'field types' => array('geolocation'),
    ),
  );  
}

function geolocation_widget_settings() {
  // This widget really has no settings...
  // the google widget will probably require a gmap api key here.
}

function geolocation_widget($op, $node, $field, &$items) {
  $fieldname = $field['field_name'];
  switch($op) {
    case 'form':
      $form[$fieldname] = array(
        '#type' => 'fieldset',
        '#title' => $field['widget']['label'],
        '#weight' => $field['widget']['weight'],
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#tree' => TRUE,
      );

      // if we got items, add em.
      if (count($items)) {
        foreach($items as $delta => $item) {
          $form[$fieldname][$delta] = geolocation_widget_geolocation_textfields_form($item);
        }   
      }
      // if we're a multiple field add a few extra elements, if we're a single value add a new form.
      if ($field['multiple'] || count($items) == 0) {
        $form[$fieldname][0] = geolocation_widget_geolocation_textfields_form();
      }   
      return $form;

    case 'process form values':
      // Don't save empty values, beyond the first value.
      foreach ($items as $delta => $item) {
        if ($item['value'] == '' && $delta > 0) {
          unset($items[$delta]);
        }
      }
      break;
  }
}

function geolocation_widget_geolocation_textfields_form($item = array()) {
  $form = array();
  $form['latitude'] = array(
    '#type' => 'textfield',
    '#title' => t('Latitude'),
    '#default_value' => $item['latitude'],
    '#required' => TRUE,
  );
  $form['longitude'] = array(
    '#type' => 'textfield',
    '#title' => t('Longitude'),
    '#default_value' => $item['longitude'],
    '#required' => TRUE,
  );
  return $form;
}

/**
 * @}
 */


/**
 * @defgoup geolocation_formatter_hooks
 * @{
 * 
 * Plain formatter for geolocation.
 */

function geolocation_field_formatter_info() {
  $formatters = array(
    'geolocation_plain' => array(
      'label' => 'Plain',
      'field types' => array('geolocation'),
    ),
  );
  return $formatters;
}

function geolocation_field_formatter($field, $item, $formatter) {
  switch($formatter) {
    case 'geolocation_plain':
      return theme('geolocation_plain', $item);
  }
}

function theme_geolocation_plain($item) {
  $output = '<span class="latitude"><span class="label">'. t('Latitude') .':&nbsp;</span><span class="value">'. check_plain($item['latitude']) .'</span>&nbsp;';
  $output .= '<span class="longitude"><span class="label">'. t('Longitude').':&nbsp;</span><span class="value">'. check_plain($item['longitude']) .'</span>';
  return '<div class="geolocation">'. $output .'<div>';
}

/**
 * @}
 */
