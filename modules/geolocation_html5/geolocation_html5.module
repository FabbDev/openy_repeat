<?php
// $Id$

/**
 * @file
 * HTML5 widget and formaters for Geolocation.
 */
/**
 * Implements hook_field_formatter_info().
 */
function geolocation_html5_field_formatter_info() {
  return array(
    'geolocation_html5_mapimage' => array(
      'label' => t('HTML5 Map image'),
      'field types' => array('geolocation_latlng'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function geolocation_html5_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  drupal_add_css(drupal_get_path('module', 'geolocation_html5') . '/geolocation_html5.css', 'file');

  switch ($display['type']) {

    case 'geolocation_html5_mapimage':
      foreach ($items as $delta => $item) {
        // Calculate dot position.
        $latitude = $item['lat'];
        $longitude = $item['lng'];
        $left = _geolocation_html5_lng2px($longitude, -168, 450);
        $bottom = _geolocation_html5_lat2px($latitude, 78, -58, 250);
        $dot_style = ' style="display:block; left:'. $left .'px; bottom:'. $bottom .'px;"';

        $element[$delta]['mapimage'] = array(
          '#type' => 'item',
          '#id' => 'geolocation-html5-map',
          '#markup' => '<div id="geolocation-html5-map"><div class="dot"'. $dot_style .'></div></div>',
          // DEBUG:
          // '#description' => "$latitude, $longitude",
          // TODO: port precision settings from html5_user_geolocation module.
          // '#description' => t('Saved location is rounded to <span>…</span>km units.'),
        );
      }
      break;

  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function geolocation_html5_field_widget_info() {
  return array(
    'geolocation_html5_widget' => array(
      'label' => t('HTML5 widget'),
      'field types' => array('geolocation_latlng'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function geolocation_html5_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $lat_value = isset($items[$delta]['lat']) ? $items[$delta]['lat'] : '';
  $lng_value = isset($items[$delta]['lng']) ? $items[$delta]['lng'] : '';
  $element += array(
    '#delta' => $delta,
  );

  switch ($instance['widget']['type']) {

    case 'geolocation_html5_widget':
      $element['lat'] = array(
        '#type' => 'hidden',
        '#prefix' => '<div id="geolat">',
        '#suffix' => '</div>',
        '#default_value' => $lat_value,
        '#maxlength' => 30,
      );
      $element['lng'] = array(
        '#type' => 'hidden',
        '#prefix' => '<div id="geolng">',
        '#suffix' => '</div>',
        '#default_value' => $lng_value,
        '#maxlength' => 30,
      );
      $element['save'] = array(
        '#type' => 'checkbox',
        '#title' => t('Save my location'),
        '#description' => t('Your location will be saved and may be shared.'),
        '#default_value' => $lat_value !== FALSE,
      );
      
      /*
      $dot_style = '';
      // If we have a lat/lng pair, calculate dot position.
      if (isset($lat_value) && isset($lng_value)) {
        $latitude = $lat_value;
        $longitude = $lng_value;
        $left = _geolocation_html5_lng2px($longitude, -168, 450);
        $bottom = _geolocation_html5_lat2px($latitude, 78, -58, 250);
        $dot_style = ' style="display:block; left:'. $left .'px; bottom:'. $bottom .'px;"';
      }
      */
      $dot_style = '';
      $element['html5map'] = array(
        '#type' => 'item',
        '#id' => 'geolocation-html5-map',
        '#markup' => '<div id="geolocation-html5-map"><div class="dot"'. $dot_style .'></div></div>',
        // TODO: port precision settings from html5_user_geolocation module.
        // '#description' => t('Saved location is rounded to <span>…</span>km units.'),
      );
      $element['messages'] = array(
        '#type' => 'item',
        '#id' => 'geolocation-html5-messages',
        '#markup' => '<div class="not-supported">' . t('Your web browser does not support this feature.') . '</div>'
          . '<div class="geolocating">Your browser is looking for your location, you may need to approve this…</div>',
      );

      // Attach CSS and JS files via FAPI '#attached'.
      $element['html5map']['#attached']['css'][] = drupal_get_path('module', 'geolocation_html5') . '/geolocation_html5.css';
      $element['html5map']['#attached']['js'][] = array(
        'data' => drupal_get_path('module', 'geolocation_html5') . '/geolocation_html5.js',
        'type' => 'file'
      );
     break;


      /*
      We may need this modified for html5UserGeolocationPrecision ?
      $map_defaults = array(
        'lat' => $map_defaults_lat,
        'lng' => $map_defaults_lng
      );
      $element['html5map']['#attached']['js'][] = array('data' => array('map_defaults' => $map_defaults), 'type' => 'setting');
      */

  }
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function geolocation_html5_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'geolocation_invalid':
      form_error($element, $error['message']);
      break;
  }
}


/**
 * Helper function converts latitude to mercator value (Mercator projection).
 */
function _lat2mercator($latitude) {
  return log(tan($latitude * pi() / 180) + 1 / cos($latitude * pi() / 180));
}

/**
 * Helper function converts longitude pixel value for display in image map.
 */
function _geolocation_html5_lng2px($longitude, $leftLongitude, $width) {
  return fmod(($longitude - $leftLongitude + 360) / 360, 1) * $width;
}

/**
 * Helper function converts latitude pixel value for display in image map.
 */
function _geolocation_html5_lat2px($latitude, $topLatitude, $bottomLatitude, $height) {
  return (_lat2mercator($latitude) - _lat2mercator($bottomLatitude)) / (_lat2mercator($topLatitude) - _lat2mercator($bottomLatitude)) * $height;
}







/*
We need this somewhere
function html5_user_geolocation_settings_form() {

  $form['html5_user_geolocation_why'] = array(
    '#title' => t('How will user locations be used'),
    '#type' => 'textarea',
    '#description' => t('Users should know why and how their location will be used; see <a href="http://www.w3.org/TR/geolocation-API/#privacy_for_recipients">privacy considerations for recipients of location information</a>.'),
    '#rows' => 2,
    '#default_value' => variable_get('html5_user_geolocation_why', t('Your location will be saved and may be shared.')),
  );
  return system_settings_form($form);
}

*/
